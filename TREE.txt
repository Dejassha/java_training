//TREE


1) BINARY TREEE - INORDER, PREODER, POSTORDER

import java.util.*;
class TreeNode{
    int value;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int value){
        this.value=value;
        this.left=null;
        this.right=null;
    }
}
class BinaryTree{
    TreeNode root;
    public void inorder(TreeNode root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.value + " ");
        inorder(root.right);
    }
    public void preorder(TreeNode root){
        if(root==null){
            return;
        }
        System.out.print(root.value + " ");
        preorder(root.left);
        preorder(root.right);
    }
    public void postorder(TreeNode root){
        if(root==null){
            return;
        }
        preorder(root.left);
        preorder(root.right);
        System.out.print(root.value + " ");
    }
}
public class Main{
    public static void main(String[]args){
        BinaryTree tree = new BinaryTree();
        tree.root = new TreeNode(1);
        tree.root.left = new TreeNode(2);
        tree.root.right = new TreeNode(3);
        System.out.println("Inorder Traversal");
        tree.inorder(tree.root);
        System.out.println();
         System.out.println("preorder Traversal");
        tree.preorder(tree.root);
        System.out.println();
         System.out.println("postorder Traversal");
        tree.postorder(tree.root);
        System.out.println();
    }
}
OUTPUT:

Inorder Traversal
1 2 3 
Preorder Traversal
2 1 3
Postorder Traversal
2 3 1